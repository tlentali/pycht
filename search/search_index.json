{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"\ud83c\udfa8 Pycht","text":"<p>Pycht is a lightweight Python tool that transforms images into colorful street art-style stencils using K-Means clustering.</p> <p>It automatically reduces an image\u2019s color palette into distinct clusters and generates transparent PNG layers for each one \u2014 ideal for digital or physical stencil creation, creative coding projects, or simply exploring image segmentation.</p>"},{"location":"index.html#features","title":"\u2728 Features","text":"<ul> <li>\ud83e\udde0 Simple image clustering using Scikit-Learn\u2019s K-Means algorithm  </li> <li>\ud83d\uddbc\ufe0f Color separation with transparency masks  </li> <li>\ud83d\udcc1 Input/output file handling with minimal setup  </li> <li>\ud83e\uddf0 Modular architecture for easy extension</li> </ul>"},{"location":"index.html#how-it-works","title":"\ud83d\ude80 How It Works","text":"<ol> <li>Load an image.</li> <li>Process the pixels into a 2D format.</li> <li>Cluster colors using K-Means.</li> <li>Separate each color cluster into its own transparent stencil.</li> <li>Save the final image and each stencil layer as a <code>.png</code>.</li> </ol>"},{"location":"index.html#example-usage","title":"\ud83d\udce6 Example Usage","text":"<pre><code>import pycht\n\n# Create a stencil with 5 color clusters\npycht.stencil(\"images/input.jpg\", nb_colors=5)\n</code></pre> <p>This will generate: - stencil_final.png \u2192 final clustered image - stencil_1.png, stencil_2.png, etc. \u2192 one per color cluster, with transparency</p>"},{"location":"index.html#try-it-out","title":"\ud83e\uddea Try It Out","text":"<p>Want to experiment? Just provide any image and see how it gets broken down into layers of color.</p>"},{"location":"index.html#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Getting Started</li> <li>API Reference</li> </ul>"},{"location":"index.html#technologies-used","title":"\ud83d\udee0\ufe0f Technologies Used","text":"<ul> <li>Python 3.12+</li> <li>OpenCV</li> <li>NumPy</li> <li>MkDocs (for this documentation!)</li> </ul>"},{"location":"index.html#contributing","title":"\ud83d\ude4c Contributing","text":"<p>Pull requests are welcome! Feel free to open an issue or suggest improvements.</p>"},{"location":"index.html#license","title":"\ud83d\udcc4 License","text":"<p>MIT License \u00a9 Thomas Lentali</p>"},{"location":"getting-started.html","title":"\ud83d\ude80 Getting Started","text":"<p>Welcome to Pycht \u2013 a tool for transforming images into colorful stencil layers using K-Means clustering. This guide will help you install, use, and customize Pycht step-by-step.</p>"},{"location":"getting-started.html#installation","title":"\ud83d\udce6 Installation","text":"<p>Clone the repository and install dependencies:</p> <pre><code>git clone https://github.com/tlentali/pycht.git\ncd pycht\npip install -r requirements.txt\n</code></pre> <p>Alternatively, if you're using a virtual environment:</p> <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install -r requirements.txt\n</code></pre> <p>We suggest you to use uv:</p> <pre><code>uv venv --python ~/.pyenv/versions/3.12.2/bin/python\nsource .venv/bin/activate\nuv sync --inexact\n</code></pre>"},{"location":"getting-started.html#usage-example","title":"\ud83d\uddbc\ufe0f Usage Example","text":"<p>Here\u2019s how to process an image and create stencils:</p> <pre><code>import Pycht\n\npycht.stencil(\"images/input.jpg\", nb_colors=4, output_path=\"output/\")\n</code></pre> <p>This will: - Load <code>input.jpg</code> - Cluster its colors into 4 dominant tones - Save:   - <code>output/</code>: the final image with clustered colors   - <code>stencil_1.png</code>, <code>stencil_2.png</code>, ...: one per color, with transparency</p>"},{"location":"getting-started.html#parameters","title":"\u2699\ufe0f Parameters","text":"<ul> <li><code>input_img</code> (str): Path to the original image.</li> <li><code>output_path</code> (str): Path to save the clustered version of the image.</li> <li><code>nb_colors</code> (int): Number of color clusters (stencils) to generate.</li> </ul>"},{"location":"getting-started.html#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>pycht/\n\u2502\n\u251c\u2500\u2500 clustering.py         # Handles K-Means color clustering\n\u251c\u2500\u2500 image_processing.py   # Image reading, reshaping, saving, display\n\u251c\u2500\u2500 pycht.py              # Main class combining everything\n\u251c\u2500\u2500 images/               # Your input/output folder (create it)\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"getting-started.html#try-it-with-your-own-image","title":"\ud83e\uddea Try It With Your Own Image","text":"<p>Put any <code>.jpg</code> or <code>.png</code> in the <code>images/</code> folder and run the script. The tool will output one clustered image and one stencil per color.</p>"},{"location":"getting-started.html#customization-ideas","title":"\ud83d\udee0\ufe0f Customization Ideas","text":"<ul> <li>Try different numbers of <code>nb_colors</code> to control stencil complexity.</li> <li>Preprocess the image (e.g., resize or blur) before clustering.</li> <li>Adjust the clustering criteria in <code>clustering.py</code> if needed.</li> <li>Change output paths to organize your stencil layers better.</li> </ul>"},{"location":"getting-started.html#next-steps","title":"\ud83d\udcda Next Steps","text":"<ul> <li>Browse the API Reference</li> <li>View example images (if available)</li> </ul>"},{"location":"getting-started.html#need-help","title":"\u2753 Need Help?","text":"<p>Feel free to open an issue on GitHub if you run into trouble.</p> <p>Happy stenciling! \ud83c\udfa8</p>"},{"location":"reference/clustering.html","title":"clustering.py","text":"<p>Module for performing color clustering on images using K-Means.</p>"},{"location":"reference/clustering.html#pycht.clustering.Clustering","title":"<code>Clustering</code>","text":"<p>Perform K-Means clustering on image data to group similar colors.</p> Source code in <code>pycht/clustering.py</code> <pre><code>class Clustering:\n    \"\"\"\n    Perform K-Means clustering on image data to group similar colors.\n    \"\"\"\n\n    @staticmethod\n    def compute(pixel_array: np.ndarray, nb_clusters: int, random_state: int = 0) -&gt; np.ndarray:\n        \"\"\"\n        Apply K-Means clustering to the given data and return the clustered result.\n\n        Parameters\n        ----------\n        pixel_array : np.ndarray\n            Flattened image data (pixels), shape (num_pixels, num_channels).\n        nb_clusters : int\n            The number of color clusters to form.\n        random_state : int\n            Random seed for reproducibility.\n\n        Returns\n        -------\n        np.ndarray\n            The clustered image data where each pixel is replaced by the centroid of its cluster,\n            with dtype uint8 and the same shape as pixel_array.\n        \"\"\"\n        kmeans = KMeans(n_clusters=nb_clusters, n_init=10, random_state=random_state)\n        labels = kmeans.fit_predict(pixel_array)\n        centers = np.uint8(kmeans.cluster_centers_)\n        return centers[labels]\n</code></pre>"},{"location":"reference/clustering.html#pycht.clustering.Clustering.compute","title":"<code>compute(pixel_array, nb_clusters, random_state=0)</code>  <code>staticmethod</code>","text":"<p>Apply K-Means clustering to the given data and return the clustered result.</p>"},{"location":"reference/clustering.html#pycht.clustering.Clustering.compute--parameters","title":"Parameters","text":"<p>pixel_array : np.ndarray     Flattened image data (pixels), shape (num_pixels, num_channels). nb_clusters : int     The number of color clusters to form. random_state : int     Random seed for reproducibility.</p>"},{"location":"reference/clustering.html#pycht.clustering.Clustering.compute--returns","title":"Returns","text":"<p>np.ndarray     The clustered image data where each pixel is replaced by the centroid of its cluster,     with dtype uint8 and the same shape as pixel_array.</p> Source code in <code>pycht/clustering.py</code> <pre><code>@staticmethod\ndef compute(pixel_array: np.ndarray, nb_clusters: int, random_state: int = 0) -&gt; np.ndarray:\n    \"\"\"\n    Apply K-Means clustering to the given data and return the clustered result.\n\n    Parameters\n    ----------\n    pixel_array : np.ndarray\n        Flattened image data (pixels), shape (num_pixels, num_channels).\n    nb_clusters : int\n        The number of color clusters to form.\n    random_state : int\n        Random seed for reproducibility.\n\n    Returns\n    -------\n    np.ndarray\n        The clustered image data where each pixel is replaced by the centroid of its cluster,\n        with dtype uint8 and the same shape as pixel_array.\n    \"\"\"\n    kmeans = KMeans(n_clusters=nb_clusters, n_init=10, random_state=random_state)\n    labels = kmeans.fit_predict(pixel_array)\n    centers = np.uint8(kmeans.cluster_centers_)\n    return centers[labels]\n</code></pre>"},{"location":"reference/image_processing.html","title":"image_processing.py","text":""},{"location":"reference/image_processing.html#pycht.image_processing.ImageProcessing","title":"<code>ImageProcessing</code>","text":"<p>A collection of image processing methods for loading, transforming, and segmenting colors within an image using Pillow instead of OpenCV.</p> Source code in <code>pycht/image_processing.py</code> <pre><code>class ImageProcessing:\n    \"\"\"\n    A collection of image processing methods for loading, transforming,\n    and segmenting colors within an image using Pillow instead of OpenCV.\n    \"\"\"\n\n    def process(self, input_path: Path) -&gt; np.ndarray:\n        \"\"\"\n        Load an image from disk and flatten it into a 2D array of float32 pixels.\n        \"\"\"\n        if not input_path.exists():\n            raise FileNotFoundError(f\"Image not found at: {input_path}\")\n        img = Image.open(input_path).convert(\"RGB\")\n        return np.float32(np.array(img).reshape((-1, 3)))\n\n    @staticmethod\n    def write_image(image: np.ndarray, output_path: Path) -&gt; None:\n        \"\"\"Write image to a file.\"\"\"\n        output_path.parent.mkdir(parents=True, exist_ok=True)\n        img = Image.fromarray(image)\n        img.save(output_path)\n\n    @staticmethod\n    def to_bgra_with_alpha(image: np.ndarray, alpha_mask: np.ndarray) -&gt; np.ndarray:\n        \"\"\"\n        Convert an RGB image to RGBA using a binary alpha mask.\n        \"\"\"\n        h, w, _ = image.shape\n        rgba = np.zeros((h, w, 4), dtype=np.uint8)\n        rgba[:, :, :3] = image\n        rgba[:, :, 3] = alpha_mask\n        return rgba\n\n    def color_separation(\n        self,\n        clustered_pixels: np.ndarray,\n        input_path: Path,\n        output_dir: Path,\n        background_color: Tuple[int, int, int] = (0, 0, 0),\n    ) -&gt; None:\n        \"\"\"\n        Generate and save separate stencil images for each color cluster in the input image.\n        \"\"\"\n        clustered_image, shape = self._load_and_prepare(input_path, clustered_pixels)\n        unique_colors = np.unique(clustered_pixels, axis=0)\n\n        for i, color in enumerate(unique_colors, start=1):\n            stencil_bgra = self._create_stencil_image(clustered_image, color, background_color)\n            self.write_image(stencil_bgra, output_dir / f\"stencil_{i}.png\")\n\n        self.write_image(clustered_image, output_dir / \"stencil_final.png\")\n\n    def _load_and_prepare(self, input_path: Path, clustered_pixels: np.ndarray) -&gt; Tuple[np.ndarray, Tuple[int, int]]:\n        \"\"\"\n        Load the original image to extract its shape and reshape the clustered pixel data accordingly.\n        \"\"\"\n        if not input_path.exists():\n            raise FileNotFoundError(f\"Image not found at: {input_path}\")\n        img = Image.open(input_path).convert(\"RGB\")\n        w, h = img.size\n        clustered_image = clustered_pixels.reshape((h, w, 3)).astype(np.uint8)\n        return clustered_image, (h, w)\n\n    def _create_stencil_image(\n        self, clustered_image: np.ndarray, color: np.ndarray, background_color: Tuple[int, int, int]\n    ) -&gt; np.ndarray:\n        \"\"\"\n        Create a RGBA stencil image where only the selected color cluster is visible and the rest is transparent.\n        \"\"\"\n        mask = np.all(clustered_image == color, axis=2)\n        stencil = np.full_like(clustered_image, background_color, dtype=np.uint8)\n        stencil[mask] = color\n        alpha = (mask * 255).astype(np.uint8)\n        return self.to_bgra_with_alpha(stencil, alpha)\n</code></pre>"},{"location":"reference/image_processing.html#pycht.image_processing.ImageProcessing.color_separation","title":"<code>color_separation(clustered_pixels, input_path, output_dir, background_color=(0, 0, 0))</code>","text":"<p>Generate and save separate stencil images for each color cluster in the input image.</p> Source code in <code>pycht/image_processing.py</code> <pre><code>def color_separation(\n    self,\n    clustered_pixels: np.ndarray,\n    input_path: Path,\n    output_dir: Path,\n    background_color: Tuple[int, int, int] = (0, 0, 0),\n) -&gt; None:\n    \"\"\"\n    Generate and save separate stencil images for each color cluster in the input image.\n    \"\"\"\n    clustered_image, shape = self._load_and_prepare(input_path, clustered_pixels)\n    unique_colors = np.unique(clustered_pixels, axis=0)\n\n    for i, color in enumerate(unique_colors, start=1):\n        stencil_bgra = self._create_stencil_image(clustered_image, color, background_color)\n        self.write_image(stencil_bgra, output_dir / f\"stencil_{i}.png\")\n\n    self.write_image(clustered_image, output_dir / \"stencil_final.png\")\n</code></pre>"},{"location":"reference/image_processing.html#pycht.image_processing.ImageProcessing.process","title":"<code>process(input_path)</code>","text":"<p>Load an image from disk and flatten it into a 2D array of float32 pixels.</p> Source code in <code>pycht/image_processing.py</code> <pre><code>def process(self, input_path: Path) -&gt; np.ndarray:\n    \"\"\"\n    Load an image from disk and flatten it into a 2D array of float32 pixels.\n    \"\"\"\n    if not input_path.exists():\n        raise FileNotFoundError(f\"Image not found at: {input_path}\")\n    img = Image.open(input_path).convert(\"RGB\")\n    return np.float32(np.array(img).reshape((-1, 3)))\n</code></pre>"},{"location":"reference/image_processing.html#pycht.image_processing.ImageProcessing.to_bgra_with_alpha","title":"<code>to_bgra_with_alpha(image, alpha_mask)</code>  <code>staticmethod</code>","text":"<p>Convert an RGB image to RGBA using a binary alpha mask.</p> Source code in <code>pycht/image_processing.py</code> <pre><code>@staticmethod\ndef to_bgra_with_alpha(image: np.ndarray, alpha_mask: np.ndarray) -&gt; np.ndarray:\n    \"\"\"\n    Convert an RGB image to RGBA using a binary alpha mask.\n    \"\"\"\n    h, w, _ = image.shape\n    rgba = np.zeros((h, w, 4), dtype=np.uint8)\n    rgba[:, :, :3] = image\n    rgba[:, :, 3] = alpha_mask\n    return rgba\n</code></pre>"},{"location":"reference/image_processing.html#pycht.image_processing.ImageProcessing.write_image","title":"<code>write_image(image, output_path)</code>  <code>staticmethod</code>","text":"<p>Write image to a file.</p> Source code in <code>pycht/image_processing.py</code> <pre><code>@staticmethod\ndef write_image(image: np.ndarray, output_path: Path) -&gt; None:\n    \"\"\"Write image to a file.\"\"\"\n    output_path.parent.mkdir(parents=True, exist_ok=True)\n    img = Image.fromarray(image)\n    img.save(output_path)\n</code></pre>"},{"location":"reference/pycht.html","title":"pycht.py","text":"<p>Main project logic for generating color-separated stencils from an input image.</p>"},{"location":"reference/pycht.html#pycht.pycht.Pycht","title":"<code>Pycht</code>","text":"<p>Main interface for generating color-separated stencils from an input image.</p> <p>This class orchestrates the image processing and clustering steps by using the <code>ImageProcessing</code> and <code>Clustering</code> components.</p> Source code in <code>pycht/pycht.py</code> <pre><code>class Pycht:\n    \"\"\"\n    Main interface for generating color-separated stencils from an input image.\n\n    This class orchestrates the image processing and clustering steps by\n    using the `ImageProcessing` and `Clustering` components.\n    \"\"\"\n\n    def __init__(self, image_processor: ImageProcessing = None, clustering_model: Clustering = None) -&gt; None:\n        self.image_processing = image_processor or ImageProcessing()\n        self.clustering = clustering_model or Clustering()\n\n    def stencil(self, input_img: str | Path, nb_colors: int = 3, output_path: str | Path = \"./\") -&gt; None:\n        \"\"\"\n        Generate color stencils from an input image using K-Means clustering.\n\n        Parameters\n        ----------\n        input_img : Path or str\n            Path to the input image file.\n        output_path : Path or str\n            Directory path to save the stencil images.\n        nb_colors : int\n            Number of color clusters to segment the image into.\n        \"\"\"\n        input_img = Path(input_img)\n        output_path = Path(output_path)\n\n        flattened_img = self.image_processing.process(input_img)\n        clustered_img = self.clustering.compute(flattened_img, nb_colors)\n        self.image_processing.color_separation(clustered_img, input_img, output_path)\n</code></pre>"},{"location":"reference/pycht.html#pycht.pycht.Pycht.stencil","title":"<code>stencil(input_img, nb_colors=3, output_path='./')</code>","text":"<p>Generate color stencils from an input image using K-Means clustering.</p>"},{"location":"reference/pycht.html#pycht.pycht.Pycht.stencil--parameters","title":"Parameters","text":"<p>input_img : Path or str     Path to the input image file. output_path : Path or str     Directory path to save the stencil images. nb_colors : int     Number of color clusters to segment the image into.</p> Source code in <code>pycht/pycht.py</code> <pre><code>def stencil(self, input_img: str | Path, nb_colors: int = 3, output_path: str | Path = \"./\") -&gt; None:\n    \"\"\"\n    Generate color stencils from an input image using K-Means clustering.\n\n    Parameters\n    ----------\n    input_img : Path or str\n        Path to the input image file.\n    output_path : Path or str\n        Directory path to save the stencil images.\n    nb_colors : int\n        Number of color clusters to segment the image into.\n    \"\"\"\n    input_img = Path(input_img)\n    output_path = Path(output_path)\n\n    flattened_img = self.image_processing.process(input_img)\n    clustered_img = self.clustering.compute(flattened_img, nb_colors)\n    self.image_processing.color_separation(clustered_img, input_img, output_path)\n</code></pre>"}]}